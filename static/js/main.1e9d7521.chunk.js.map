{"version":3,"sources":["components/card.jsx","components/board.jsx","routes/forbidden.jsx","serviceWorker.js","index.js","routes/error.jsx","components/profilepicture.jsx","hooks/uploadimage.js","routes/asset.jsx","routes/collections.jsx","hooks/fetchassetsbyowner.js","routes/assets.jsx","App.js","getWeb3.js","routes/home.jsx","routes/collection.jsx","routes/explore.jsx","routes/notfound.jsx","routes/choosecollection.jsx","components/authentication.jsx","routes/main.jsx","hooks/createcollection.js","routes/newcollection.jsx","hooks/createasset.js","routes/newasset.jsx","routes/loading.jsx","hooks/fetchcollections.js","hooks/fetchassetsbycollection.js","hooks/getcollectiondetails.js"],"names":["Card","props","item","path","address","type","tokenId","className","to","style","backgroundImage","tokenURI","creatorPath","creator","name","assets","length","truncateEthAddress","description","Board","items","map","index","key","Forbidden","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Error","message","ProfilePicture","bgurl","uri","Moralis","require","useUploadImage","image","a","file","File","saveIPFS","console","log","ipfs","hash","Asset","useOutletContext","web3","contracts","useParams","tokenid","getCollectionDetails","useGetCollectionDetails","nftCollectionFactory","useState","loaded","setLoaded","collection","setCollection","setTokenURI","useEffect","nftCollection","eth","Contract","contractNftCollection","abi","methods","call","Collections","user","fetchCollections","useFetchCollections","collections","setCollections","_creator","res","fetched","col","push","utils","isAddress","toChecksumAddress","get","useFetchAssetsByOwner","factory","addressCollection","balanceOf","tokenCount","tokenOfOwnerByIndex","token","Assets","fetchAssetsByOwner","setAssets","forEach","config","__dirname","state","accounts","runInit","initUser","setState","User","current","authenticate","logOut","signingMessage","componentDidMount","start","serverUrl","process","appId","masterKey","getWeb3","getAccounts","net","getId","networkId","nftCollectionFactoryNetwork","contractNftCollectionFactory","networks","nftCollectionNetwork","ethereum","on","error","this","element","Component","Promise","resolve","reject","addEventListener","Web3","enable","provider","providers","HttpProvider","Home","Collection","navigate","useNavigate","onClick","createButton","timestamp","Explore","sorted","sort","b","Notfound","customFilter","Authentication","showNav","setShowNav","authenticating","setAuthenticating","id","userAdress","urlAssets","urlCollections","disabled","navItems","Main","context","useCreateCollection","contract","createNFTCollection","send","from","events","NftCollectionCreated","returnValues","_collectionAddress","NewCollection","createCollection","uploadImage","submitting","setSubmitting","availableName","setAvailableName","collectionName","setCollectionName","collectionNameRequired","setCollectionNameRequired","collectionImage","setCollectionImage","collectionImageRequired","setCollectionImageRequired","collectionImagePreview","setCollectionImagePreview","isAvailable","filter","_collectionName","kck256","asciiToHex","padRight","bytes32name","handleName","querySelector","value","available","run","e","preventDefault","autoComplete","onBlur","onChange","files","reader","FileReader","result","readAsDataURL","click","src","imageRequired","useCreateAsset","price","mintCollection","eventValues","NewTokenMinted","_tokenId","NewAsset","createAsset","assetPrice","setAssetPrice","assetImage","setAssetImage","assetPriceRequired","setAssetPriceRequired","assetImageRequired","setAssetImageRequired","assetImagePreview","setAssetImagePreview","createdAssetRes","min","max","priceRequired","Loading","getPastEvents","fromBlock","toBlock","_timestamp","_tokenURI","useFetchAssetsByCollection","asset","fetchAssetsByCollection","coll"],"mappings":"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","file":"static/js/main.1e9d7521.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport truncateEthAddress from 'truncate-eth-address';\n\nconst Card = (props) => {\n    \n    const item = props.item;\n    let path = \"/collection/\" + item.address;\n    if(props.type === 'asset'){\n        path += \"/\" + item.tokenId;\n    }\n\n    const bgurl = () => {\n        return 'https://ipfs.moralis.io:2053/ipfs/' + item.tokenURI;\n    }\n\n    const description = () => {\n        if (props.type === 'collection') {\n            let creatorPath = '/user/'+item.creator+'/collections';\n            return(\n                <>\n                <b>{item.name}</b> ({item.assets.length} NTF)\n                <br />\n                created by <Link to={creatorPath}>{truncateEthAddress(item.creator)}</Link>\n                </>\n            )\n        }\n        else {\n            return (\n                <>\n                    <b>NFT {truncateEthAddress(item.address)} #{item.tokenId}</b>\n                </>\n            )\n        }\n    }\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <Link to={path}>\n                <div className=\"illustration\" style={{ backgroundImage: `url(${bgurl()})` }}></div>\n            </Link>\n            <div className=\"title\">\n                {description()}\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./card\";\n\nconst Board = (props) => {\n    const type = props.type;\n    const items = props.items;\n    if (items.length === 0){\n        return <p>No {type}s available</p>\n    }\n    return (\n        <div className=\"board\">\n            {items.map((item, index)=>{\n                return <Card key={index} type={type} item={item} />\n            })}\n        </div>\n    );\n}\n\nexport default Board;","import React from \"react\";\n\nconst Forbidden = (props) => {\n    return (\n        <main>\n            <h1>\n                Restricted access\n            </h1>\n            <p>Please connect your wallet to access this section</p>\n        </main>\n    );\n}\n\nexport default Forbidden;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\n\nconst Error = (props) => {\n    return (\n        <main>\n            <h1>\n                Error\n            </h1>\n            <p>{props.message}</p>\n        </main>\n    );\n}\n\nexport default Error;","import React from \"react\";\n\nconst ProfilePicture = (props) => {\n    let uri = props.uri;\n    let bgurl = 'https://ipfs.moralis.io:2053/ipfs/' + uri;\n    return (\n        <div className=\"profilePicture\" style={{ backgroundImage: `url(${bgurl})` }}>\n        </div>\n    )\n}\n\nexport default ProfilePicture;","const Moralis = require('moralis');\n\nconst useUploadImage = () => {\n    return async (image) => {\n        const file = new Moralis.File(image.name, image);\n        await file.saveIPFS();\n        console.log(file.ipfs(), file.hash())\n        console.log('file uploaded')\n        return file;\n        \n        //console.log(file.ipfs(), file.hash())\n\n        /*\n        // Save file reference to Moralis\n        const jobApplication = new Moralis.Object(\"Applications\");\n        jobApplication.set(\"name\", \"Satoshi\");\n        jobApplication.set(\"resume\", file);\n        await jobApplication.save();\n        \n        \n        // Retrieve file\n        const query = new Moralis.Query(\"Applications\");\n        query.equalTo(\"name\", \"Satoshi\");\n        query.find().then(function ([application]) {\n            const ipfs = application.get(\"resume\").ipfs();\n            const hash = application.get(\"resume\").hash();\n            console.log(\"IPFS url\", ipfs);\n            console.log(\"IPFS hash\", hash);\n        });\n        */\n    }\n}\n\nexport default useUploadImage;","import contractNftCollection from \"../contracts/NftCollection.json\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useNavigate, useParams, useOutletContext } from \"react-router-dom\";\nimport useGetCollectionDetails from \"../hooks/getcollectiondetails\";\n\nimport truncateEthAddress from 'truncate-eth-address';\n//import Error from \"./error\";\nimport Loading from \"./loading\";\nimport ProfilePicture from \"../components/profilepicture\";\n\nconst Asset = () => {\n    \n    const [user, web3, contracts] = useOutletContext();    \n    const { address } = useParams();\n    const { tokenid } = useParams();\n    const getCollectionDetails = useGetCollectionDetails(web3, contracts.nftCollectionFactory);\n\n    const [loaded, setLoaded] = useState(false);\n    const [collection, setCollection] = useState();\n    const [tokenURI, setTokenURI] = useState();\n\n    const creatorPath = (creator) => {\n        return '/user/' + creator+'/assets';\n    }\n\n    useEffect(async () => {\n        let collection = await getCollectionDetails(address);\n        setCollection(collection);\n        try {\n            let nftCollection = new web3.eth.Contract(contractNftCollection.abi, address);\n            let tokenURI = await nftCollection.methods.tokenURI(tokenid).call();\n            setTokenURI(tokenURI);\n            setLoaded(true);\n        } catch (error) {\n            console.log(error);\n        }\n    }, []);\n\n    if (!loaded) {\n        return <Loading />\n    }\n    return (\n        <main>\n            <ProfilePicture uri={tokenURI} />\n            <h1>\n                NFT {truncateEthAddress(address)} #{tokenid}\n            </h1>\n            Collection: {collection.name}<br/>\n            created by <Link to={creatorPath(collection.creator)}>{truncateEthAddress(collection.creator)}</Link>\n        </main>\n    );\n}\n\nexport default Asset;","import React, { useState, useEffect } from \"react\";\nimport { useParams, useOutletContext } from \"react-router-dom\";\nimport Board from \"../components/board\";\nimport Loading from \"../routes/loading\";\nimport Error from \"../routes/error\";\nimport useFetchCollections from \"../hooks/fetchcollections\";\nimport useGetCollectionDetails from \"../hooks/getcollectiondetails\";\nimport truncateEthAddress from \"truncate-eth-address\";\n\nconst Collections = () => {\n\n    const [user, web3, contracts] = useOutletContext();\n    const { address } = useParams();\n    const fetchCollections = useFetchCollections(contracts.nftCollectionFactory);\n    const getCollectionDetails = useGetCollectionDetails(web3, contracts.nftCollectionFactory);\n    const [loaded, setLoaded] = useState(false);\n    const [collections, setCollections] = useState([]);\n\n    const title = () => {\n        if (user && web3.utils.toChecksumAddress(address) === web3.utils.toChecksumAddress(user.get('ethAddress'))){\n            return \"My Collections\"\n        }\n        return 'Collections by '+truncateEthAddress(address);\n    }\n\n    useEffect(() => {\n        let customFilter = {\n            _creator: address\n        }\n        fetchCollections(customFilter).then(async(res) => {\n            let fetched = [];\n            for (const col of res) {\n                let collection = await getCollectionDetails(col.address);\n                collection.creator = col.creator;\n                fetched.push(collection);\n            }\n            setCollections(fetched);\n            setLoaded(true);\n        });\n    }, []);\n\n    if (!loaded) {\n        return <Loading />\n    } else if (!web3.utils.isAddress(address)) {\n        return <Error message=\"Requested user not found...\" />;\n    }\n    return (\n        <main>\n            <h1>{title()}</h1>\n            <Board type=\"collection\" items={collections} />\n        </main>\n    );\n}\n\nexport default Collections;","import contractNftCollection from \"../contracts/NftCollection.json\";\n\nconst useFetchAssetsByOwner = (web3, factory) => {\n    return async (user, addressCollection) => {\n        let nftCollection = new web3.eth.Contract(contractNftCollection.abi, addressCollection);\n        const tokenCount = await nftCollection.methods.balanceOf(user).call();\n        let assets = [];\n        for (let index = 0; index < tokenCount; index++) {\n            const tokenId = await nftCollection.methods.tokenOfOwnerByIndex(user, index).call();\n            const tokenURI= await nftCollection.methods.tokenURI(tokenId).call();\n            let token = {\n                address: addressCollection,\n                tokenId: tokenId,\n                tokenURI: tokenURI\n            }\n            assets.push(token);\n        }\n        return assets;\n    }\n}\n\nexport default useFetchAssetsByOwner;","import React, { useState, useEffect } from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\nimport Board from \"../components/board\";\nimport Loading from \"../routes/loading\";\nimport Forbidden from \"../routes/forbidden\";\nimport useFetchAssetsByOwner from \"../hooks/fetchassetsbyowner\";\nimport useFetchCollections from \"../hooks/fetchcollections\";\n\nconst Assets = () => {\n    \n    const [user, web3, contracts] = useOutletContext();\n    const fetchAssetsByOwner = useFetchAssetsByOwner(web3);\n    const fetchCollections = useFetchCollections(contracts.nftCollectionFactory);\n    const [loaded, setLoaded] = useState(false);\n    const [assets, setAssets] = useState([]);\n    \n    useEffect(()=>{\n        let customFilter = {\n        };\n        fetchCollections(customFilter).then(async(res) => {\n            let fetched = [];\n            for (const col of res) {\n                console.log(col);\n                let tokenIds = await fetchAssetsByOwner(user.get('ethAddress'), col.address);\n                tokenIds.forEach(tokenId => fetched.push(tokenId));\n            }\n            setAssets(fetched);\n            setLoaded(true);\n        });\n    }, []);\n    \n    if (!loaded) {\n        return <Loading />\n    }\n    if (!user) {\n        return <Forbidden />\n    }\n    return (\n        <main>\n            <h1>\n                My assets\n            </h1>\n            <Board type=\"asset\" items={assets} />\n        </main>\n    );\n}\n\nexport default Assets;","import React, { Component } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport contractNftCollectionFactory from \"./contracts/NftCollectionFactory.json\";\nimport contractNftCollection from \"./contracts/NftCollection.json\";\n//import contractNftFactory from \"./contracts/NftFactory.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Moralis from \"moralis\";\n\nimport Main from \"./routes/main\";\nimport Home from \"./routes/home\";\nimport Assets from \"./routes/assets\";\nimport User from \"./routes/user\";\nimport Collection from \"./routes/collection\";\nimport NewCollection from \"./routes/newcollection\";\nimport Asset from \"./routes/asset\";\nimport NewAsset from \"./routes/newasset\";\nimport Explore from \"./routes/explore\";\nimport Notfound from \"./routes/notfound\";\nimport Loading from \"./routes/loading\";\nimport Collections from \"./routes/collections\";\nimport ChooseCollection from \"./routes/choosecollection\";\n\nimport \"animate.css\";\nimport \"./App.css\";\n\nrequire('dotenv').config({ path: __dirname + '/./../../.env' });\n\nclass App extends Component {\n\n    state = {\n        web3: null,\n        accounts: null,\n        contracts: null,\n        user: null,\n        loaded: false\n    };\n\n    runInit = async () => {\n        await this.initUser();\n        this.setState({ loaded: true });\n    };\n\n    initUser = async () => {\n        let user = Moralis.User.current();\n        this.setState({ user });\n    }\n\n    authenticate = async () => {\n        if (Moralis.User.current()) {\n            await Moralis.User.logOut();\n        } else {\n            await Moralis.authenticate({ signingMessage: \"Connect your wallet\" });\n        }\n        this.initUser();\n    }\n\n    componentDidMount = async () => {\n        try {\n            \n            await Moralis.start({\n                serverUrl: process.env.REACT_APP_MORALIS_SERVER_URL,\n                appId: process.env.REACT_APP_MORALIS_APPLICATION_ID,\n                masterKey: process.env.REACT_APP_MORALIS_SECRET\n            });\n\n            // Get network provider and web3 instance.\n            const web3 = await getWeb3();\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n            // Get the contracts instances.\n            const networkId = await web3.eth.net.getId();\n            // Get Collection Factory instance.\n            const nftCollectionFactoryNetwork = contractNftCollectionFactory.networks[networkId];\n            const nftCollectionFactory = new web3.eth.Contract(\n                contractNftCollectionFactory.abi,\n                nftCollectionFactoryNetwork && nftCollectionFactoryNetwork.address,\n            );\n            // Get Collection instance.\n            const nftCollectionNetwork = contractNftCollection.networks[networkId];\n            const nftCollection = new web3.eth.Contract(\n                contractNftCollection.abi,\n                nftCollectionNetwork && nftCollectionNetwork.address,\n            );\n\n            /* const deployedNetwork = SimpleStorageContract.networks[networkId];\n            const instance = new web3.eth.Contract(\n                SimpleStorageContract.abi,\n                deployedNetwork && deployedNetwork.address,\n            );\n            */\n            \n            const contracts = {\n                nftCollectionFactory: nftCollectionFactory,\n                nftCollection: nftCollection\n            }\n\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState({ web3, accounts, contracts }, this.runInit);\n            \n            // Watch accounts\n            window.ethereum.on('accountsChanged', (accounts) => {\n                this.setState({ accounts });                \n                this.initUser();\n                this.render();\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    render() {\n        if(!this.state.loaded){\n            return <Loading />;\n        }\n        return (\n            <BrowserRouter>\n                <Routes>\n                    <Route path=\"/\" element={<Main state={this.state} authenticate={this.authenticate} />}>\n                        <Route index element={<Home />} />\n                        <Route path=\"asset/:address\" element={<Asset />} />\n                        <Route path=\"asset/new\" element={<ChooseCollection />} />\n                        <Route path=\"collection/:address/new\" element={<NewAsset />} />\n                        <Route path=\"collection/:address/:tokenid\" element={<Asset />} />\n                        <Route path=\"collection/:address\" element={<Collection />} />\n                        <Route path=\"collection/new\" element={<NewCollection />} />\n                        <Route path=\"explore\" element={<Explore />} />\n                        <Route path=\"profile/assets\" element={<Assets />} />\n                        <Route path=\"profile/collections\" element={<Collections />} />\n                        <Route path=\"user/:address/assets\" element={<Assets />} />\n                        <Route path=\"user/:address/collections\" element={<Collections />} />\n                        <Route path=\"*\" element={<Notfound />} />\n                    </Route>\n                </Routes>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\n\nconst Home = () => {\n    const [user, web3, contracts] = useOutletContext();\n    return (\n        <main>\n            <h1>Home</h1>\n        </main>\n    );\n}\n\nexport default Home;","import React, {useState, useEffect} from \"react\";\nimport { useNavigate, useParams, useOutletContext } from \"react-router-dom\";\nimport Board from \"../components/board\";\nimport ProfilePicture from \"../components/profilepicture\";\nimport Error from \"./error\";\nimport Loading from \"./loading\";\n\nimport useGetCollectionDetails from \"../hooks/getcollectiondetails\";\nimport truncateEthAddress from \"truncate-eth-address\";\n\nconst Collection = () => {\n\n    const [user, web3, contracts] = useOutletContext();    \n    const { address } = useParams();\n    const navigate = useNavigate();\n    const getCollectionDetails = useGetCollectionDetails(web3, contracts.nftCollectionFactory);\n    const [collection, setCollection] = useState();\n    const [loaded, setLoaded] = useState(false);\n    \n    useEffect(async() => {\n        let collection = await getCollectionDetails(address);\n        setCollection(collection);\n        setLoaded(true);\n    }, []);\n\n    const createButton = () => {\n        if (user && web3.utils.toChecksumAddress(collection.creator) === web3.utils.toChecksumAddress(user.get('ethAddress')) ){\n            return (\n                <form className=\"createNew\">\n                    <button onClick={() => { navigate('/collection/' + address + '/new'); }}>\n                        create new NFT\n                    </button>\n                </form>\n            )\n        }\n    }\n\n    if (!loaded) {\n        return <Loading />;\n    } else if (!collection) {\n        return <Error message=\"Requested collection not found...\" />;\n    }\n    return (\n        <main>\n            <ProfilePicture uri={collection.tokenURI} />\n            <h1>\n                Collection: {collection.name}<br/>\n            </h1>\n            {createButton()}\n            <h2>details</h2>\n            <p>\n                created on: {collection.timestamp} <br />\n                created by: {truncateEthAddress(collection.creator)}\n            </p>\n            <h2>NFT</h2>\n            <Board type=\"asset\" items={collection.assets} />\n        </main>\n    );\n}\n\nexport default Collection;","import React, { useState, useEffect } from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\nimport Board from \"../components/board\";\nimport Loading from \"../routes/loading\";\nimport Forbidden from \"../routes/forbidden\";\nimport useFetchCollections from \"../hooks/fetchcollections\";\nimport useGetCollectionDetails from \"../hooks/getcollectiondetails\";\n\nconst Explore = () => {\n\n    const [user, web3, contracts] = useOutletContext();\n    const fetchCollections = useFetchCollections(contracts.nftCollectionFactory);\n    const getCollectionDetails = useGetCollectionDetails(web3, contracts.nftCollectionFactory);\n    const [loaded, setLoaded] = useState(false);\n    const [collections, setCollections] = useState([]);\n\n    useEffect(() => {\n        fetchCollections().then(async (res) => {\n            let fetched = [];\n            for (const col of res) {\n                let collection = await getCollectionDetails(col.address);\n                collection.creator = col.creator;\n                fetched.push(collection);\n            }\n            let sorted = fetched.sort((a, b) => {\n                return b.timestamp - a.timestamp;\n            });\n            setCollections(sorted);\n            setLoaded(true);\n        });\n    }, []);\n\n    if (!loaded) {\n        return <Loading />\n    }\n    return (\n        <main>\n            <h1>Latest collections</h1>\n            <Board type=\"collection\" items={collections} />\n        </main>\n    );\n}\n\nexport default Explore;","import React from \"react\";\n\nconst Notfound = () => {\n    return (\n        <main>\n            <h1>\n                Not Found\n            </h1>\n            <p>Le contenu que vous cherchez n'est pas disponible</p>\n        </main>\n    );\n}\n\nexport default Notfound;","import React, { useState, useEffect } from \"react\";\nimport { useNavigate, useOutletContext } from \"react-router-dom\";\nimport Board from \"../components/board\";\nimport Loading from \"../routes/loading\";\nimport Forbidden from \"../routes/forbidden\";\nimport useFetchCollections from \"../hooks/fetchcollections\";\nimport useGetCollectionDetails from \"../hooks/getcollectiondetails\";\n\nconst Collections = () => {\n\n    const [user, web3, contracts] = useOutletContext();\n    const fetchCollections = useFetchCollections(contracts.nftCollectionFactory);\n    const getCollectionDetails = useGetCollectionDetails(web3, contracts.nftCollectionFactory);\n    const [loaded, setLoaded] = useState(false);\n    const [collections, setCollections] = useState([]);\n\n    useEffect(() => {\n        let customFilter = {\n            _creator: user.get('ethAddress')\n        }\n        fetchCollections(customFilter).then(async (res) => {\n            let fetched = [];\n            for (const col of res) {\n                console.log(col);\n                let collection = await getCollectionDetails(col.address);\n                collection.creator = col.creator;\n                fetched.push(collection);\n            }\n            setCollections(fetched);\n            setLoaded(true);\n        });\n    }, []);\n\n    const navigate = useNavigate();\n    \n    if (!loaded) {\n        return <Loading />\n    }\n    if (!user) {\n        return <Forbidden />\n    }\n    return (\n        <main>\n            <h1>\n                create a new collection\n            </h1>\n            <form className=\"createNew\">\n                <button onClick={() => { navigate('/collection/new'); }}>\n                    create\n                </button>\n            </form>\n            {collections.length > 0 &&\n                <>\n                <h1>\n                    or select an existing collection\n                </h1>\n                <Board type=\"collection\" items={collections} />\n                </>\n            }\n        </main>\n    );\n}\n\nexport default Collections;","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport truncateEthAddress from 'truncate-eth-address';\n\nconst Authentication = (props) => {\n\n    const user = props.user;\n    const [showNav, setShowNav] = useState(false);\n    const [authenticating, setAuthenticating] = useState(false);\n    const authenticate = async () => {\n        setAuthenticating(true);\n        try {\n            await props.authenticate();   \n            setShowNav(!showNav);\n            setAuthenticating(false) \n        } catch (error) {\n            setAuthenticating(false);\n        }\n    };\n\n    const userAdress = () => {\n        if(user){\n            return(\n                <div id=\"userAddress\" className=\"animate__animated animate__fadeIn\">\n                    connected: {truncateEthAddress(user.get('ethAddress'))}\n                </div>\n            )\n        }\n    }\n\n    const navItems = () => {\n        if (showNav){\n            if(user){\n                let urlAssets = '/user/' + user.get('ethAddress') +'/assets';\n                let urlCollections = '/user/' + user.get('ethAddress') +'/collections';\n                return (\n                    <ul className=\"animate__animated animate__fadeIn animate__faster\">\n                        <li><Link to={urlAssets} onClick={() => setShowNav(false)}>my assets</Link></li>\n                        <li><Link to={urlCollections} onClick={() => setShowNav(false)}>my collections</Link></li>\n                        <li><Link to=\"/collection/new\" onClick={() => setShowNav(false)}>create new collection</Link></li>\n                        <li><Link to=\"/asset/new\" onClick={() => setShowNav(false)}>create new asset</Link></li>\n                        <li><Link to=\"/explore\" onClick={() => setShowNav(false)}>explore</Link></li>\n                        <li><button onClick={() => { authenticate() }} >LOGOUT</button></li>\n                    </ul>\n                )\n            }\n            return(\n                <div id=\"connect\" className=\"animate__animated animate__fadeIn animate__faster\">\n                    <button onClick={() => { authenticate() }} disabled={authenticating}>\n                        connect my wallet\n                    </button>\n                </div>\n            )\n        }\n    }\n\n    return(\n        <nav>\n            {userAdress()}\n            <button className=\"toggleNav\" onClick={() => setShowNav(!showNav)}></button>\n            {navItems()}\n        </nav>\n    );\n}\n\nexport default Authentication;","import React from \"react\";\nimport { Outlet, Link } from \"react-router-dom\";\nimport Authentication from '../components/authentication';\n\nconst Main = (props) => {\n    \n    const user = props.state.user;\n    const web3 = props.state.web3;\n    const contracts = props.state.contracts;\n    const authenticate = props.authenticate;\n    \n    return (\n        <div>\n            <header>\n                <Link to=\"/\">AppName</Link>\n                <Authentication user={user} authenticate={authenticate} />\n            </header>\n            <Outlet context={[user, web3, contracts]} />\n            <footer>\n                AppName\n            </footer>\n        </div>\n    )\n}\n\nexport default Main;","const useCreateCollection = (contract, user) => {\n    let address = null;\n    if (user) {\n        address = user.get('ethAddress');\n    }\n    return async (name, tokenURI) => {\n        try {\n            console.log(name);\n            console.log(tokenURI);\n            let res = await contract.methods.createNFTCollection(name, '', tokenURI).send({ from: address });\n            return res.events.NftCollectionCreated.returnValues._collectionAddress;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n};\n\nexport default useCreateCollection;","import React, { useState } from \"react\";\nimport { useOutletContext, useNavigate } from \"react-router-dom\";\nimport useCreateCollection from \"../hooks/createcollection\";\n//import usePinataPush from \"../hooks/pinata\";\nimport useUploadImage from \"../hooks/uploadimage\";\nimport Forbidden from \"../routes/forbidden\";\nimport useFetchCollections from \"../hooks/fetchcollections\";\n\nconst NewCollection = () => {\n\n    const [user, web3, contracts] = useOutletContext();\n    const navigate = useNavigate();\n    const fetchCollections = useFetchCollections(contracts.nftCollectionFactory);\n    const createCollection = useCreateCollection(contracts.nftCollectionFactory, user);\n    //const pinataPush = usePinataPush();\n    const uploadImage = useUploadImage();\n\n    const [submitting, setSubmitting] = useState(false);\n    const [availableName, setAvailableName] = useState(true);\n    const [collectionName, setCollectionName] = useState(null);\n    const [collectionNameRequired, setCollectionNameRequired] = useState(false);\n    const [collectionImage, setCollectionImage] = useState(null);\n    const [collectionImageRequired, setCollectionImageRequired] = useState(false);\n    const [collectionImagePreview, setCollectionImagePreview] = useState();\n    \n    const isAvailable = async (name) => {\n        const bytes32name = (name) => {\n            let kck256 = web3.utils.asciiToHex(name);\n            return web3.utils.padRight(kck256, 32);\n        }\n        let filter = {\n            _collectionName: bytes32name(name)\n        }        \n        let res = await fetchCollections(filter);\n        console.log(res);\n        if (res.length === 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    const handleName = async () => {\n        const name = document.querySelector('#collectionName').value;\n        if(name){\n            isAvailable(name).then((available)=>{\n                if (available){\n                    console.log('available');\n                    setAvailableName(true);\n                    setCollectionNameRequired(false);\n                    setCollectionName(name);\n                } else {\n                    console.log('NOT available');\n                    setCollectionName(null);\n                    setAvailableName(false);\n                }\n            });\n        } else {\n            setCollectionName(null);\n            setAvailableName(true);\n        }\n    }\n    \n    const nameRequired = () => {\n        if (!availableName){\n            return (\n                <div className=\"required\">\n                    <span className=\"animate__animated animate__fadeIn\">\n                        this name is not available\n                    </span>\n                </div>\n            );\n        } else if (collectionNameRequired){\n            return (\n                <div className=\"required\">\n                    <span className=\"animate__animated animate__fadeIn\">\n                        the collection name is required\n                    </span>\n                </div>\n            );\n        }\n    }\n    \n    const handleImage = () => {\n        const file = document.querySelector('input[type=file]').files[0];\n        setCollectionImage(file);\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", function () {\n            setCollectionImageRequired(false);\n            setCollectionImagePreview(reader.result);\n        }, false);\n        if (file) {\n            reader.readAsDataURL(file);\n        }\n    }\n\n    const selectImage = () => {\n        document.querySelector(\"#collectionImage\").click();\n    }\n\n    const selectedImage = () => {\n        if (collectionImagePreview){\n            return <img id=\"imagePreview\" src={collectionImagePreview} />\n        }\n        return <div id=\"imageSelector\"></div>    \n    }\n\n    const imageRequired = () => {\n        if (collectionImageRequired) {\n            return (\n                <div className=\"required\">\n                    <span className=\"animate__animated animate__fadeIn\">\n                        the collection illustration is required\n                    </span>\n                </div>\n            );\n        }\n    }\n\n    const run = async (e) => {\n        e.preventDefault();\n        if (!collectionName || !collectionImage) {\n            if (!collectionName){\n                setCollectionNameRequired(true);\n            }\n            if (!collectionImage) {\n                setCollectionImageRequired(true);\n            }\n        }\n        else {\n            setSubmitting(true);\n            /*let tokenURI = '';\n            if(collectionImage){\n                let image = await uploadImage(collectionImage);\n                tokenURI += image.hash();\n            }*/\n            let image = await uploadImage(collectionImage);\n            let tokenURI = image.hash();\n            \n            let address = await createCollection(collectionName, tokenURI);                \n            if(address){\n                navigate('/collection/' + address);\n            } else {\n                setSubmitting(false);            \n            }\n            \n            /*\n            try {\n                console.log('creating contract...');\n                console.log('collection name ' + collectionName);\n                setSubmitting(false);\n            } catch (error) {\n                console.log(error);\n            }\n            */\n\n            //await pinataPush(collectionImage);\n        }\n    }\n\n    if (!user) {\n        return <Forbidden />\n    }\n    return (\n        <main>\n            <h1>\n                Create new collection\n            </h1>\n            <form className=\"createNew\" autoComplete=\"off\">\n                <fieldset>\n                    <label>\n                        Name (required)\n                    </label>\n                    <input type=\"text\" id=\"collectionName\" onBlur={handleName} />\n                    {nameRequired()}\n                </fieldset>\n                <fieldset>\n                    <label>\n                        Illustration (required)\n                    </label>\n                    <input type=\"file\" id=\"collectionImage\" onChange={handleImage} />                    \n                    <div onClick={selectImage}>\n                        {selectedImage()}\n                    </div>\n                    {imageRequired()}\n                </fieldset>\n                <fieldset>\n                    <button onClick={(e) => { run(e) }} disabled={submitting}>\n                        create collection\n                    </button>                     \n                </fieldset>\n            </form>            \n        </main>\n    );\n}\n\nexport default NewCollection;","import contractNftCollection from \"../contracts/NftCollection.json\";\n\nconst useCreateAsset = (user, web3) => {\n    let address = null;\n    if (user) {\n        address = user.get('ethAddress');\n    }\n    return async (collection, tokenURI, price) => {\n        try {\n            let nftCollection = new web3.eth.Contract(contractNftCollection.abi, collection.address);\n            let res = await nftCollection.methods.mintCollection(tokenURI, price).send({ from: address });\n            const eventValues = res.events.NewTokenMinted.returnValues;\n            return {\n                address: eventValues._collectionAddress, \n                tokenId: eventValues._tokenId};\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nexport default useCreateAsset;","import React, { useState, useEffect } from \"react\";\nimport { useOutletContext, useParams, useNavigate } from \"react-router-dom\";\nimport useCreateAsset from \"../hooks/createasset\";\nimport Forbidden from \"../routes/forbidden\";\nimport Loading from \"../routes/loading\";\nimport Error from \"../routes/error\";\nimport useGetCollectionDetails from \"../hooks/getcollectiondetails\";\nimport useUploadImage from \"../hooks/uploadimage\";\n\nconst NewAsset = () => {\n    \n    const [user, web3, contracts] = useOutletContext();    \n    const createAsset = useCreateAsset(user, web3);\n    const [submitting, setSubmitting] = useState(false);\n    const [collection, setCollection] = useState();\n    const [assetPrice, setAssetPrice] = useState(null);\n    const [assetImage, setAssetImage] = useState(null);\n    const [assetPriceRequired, setAssetPriceRequired] = useState(false);\n    const [assetImageRequired, setAssetImageRequired] = useState(false);\n    const [assetImagePreview, setAssetImagePreview] = useState();\n    const [loaded, setLoaded] = useState(false);\n    const getCollectionDetails = useGetCollectionDetails(web3, contracts.nftCollectionFactory);\n    const { address } = useParams();\n    const uploadImage = useUploadImage();\n    const navigate = useNavigate();\n\n    useEffect(async () => {\n        let collection = await getCollectionDetails(address);\n        console.log(collection);\n        setCollection(collection);\n        setLoaded(true);\n    }, []);\n\n    const handlePrice = () => {\n        const price = document.querySelector('#assetPrice').value;\n        if(price > 0){\n            setAssetPrice(price);\n            setAssetPriceRequired(false);\n        } else {\n            setAssetPrice(null);\n        }\n    }\n\n    const handleImage = () => {\n        const file = document.querySelector('input[type=file]').files[0];\n        setAssetImage(file);\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", function () {\n            setAssetImageRequired(false);\n            setAssetImagePreview(reader.result);\n        }, false);\n        if (file) {\n            reader.readAsDataURL(file);\n        }\n    }\n\n    const selectImage = () => {\n        document.querySelector(\"#assetImage\").click();\n    }\n\n    const selectedImage = () => {\n        if (assetImagePreview) {\n            return <img id=\"imagePreview\" src={assetImagePreview} />\n        }\n        return <div id=\"imageSelector\"></div>\n    }\n\n    const priceRequired = () => {\n        if (assetPriceRequired) {\n            return (\n                <div className=\"required\">\n                    <span className=\"animate__animated animate__fadeIn\">\n                        the token price is required\n                    </span>\n                </div>\n            );\n        }\n    }\n\n    const imageRequired = () => {\n        if (assetImageRequired) {\n            return (\n                <div className=\"required\">\n                    <span className=\"animate__animated animate__fadeIn\">\n                        the collection illustration is required\n                    </span>\n                </div>\n            );\n        }\n    }\n\n    const run = async (e) => {\n        e.preventDefault();\n        let price = document.querySelector(\"#assetPrice\").value;\n        if (!assetPrice || !assetImage) {\n            if (!assetPrice) {\n                setAssetPriceRequired(true);\n            }\n            if (!assetImage) {\n                setAssetImageRequired(true);\n            }    \n        }\n        else {\n            setSubmitting(true);\n            let image = await uploadImage(assetImage);\n            let tokenURI = image.hash();\n            let createdAssetRes = await createAsset(collection, tokenURI, assetPrice);\n            if (address) {\n                navigate('/collection/' + createdAssetRes.address + '/' + createdAssetRes.tokenId);\n            } else {\n                setSubmitting(false);\n            }\n        }\n    }\n    \n    if (!user) {\n        return <Forbidden />\n    } else if (!loaded) {\n        return <Loading />\n    } else if (web3.utils.toChecksumAddress(collection.creator) != web3.utils.toChecksumAddress(user.get('ethAddress'))){\n        return <Error message=\"You're not allowed to access this section\" />\n    }\n    return (\n        <main>\n            <h1>\n                Create new NFT\n            </h1>\n            <form className=\"createNew\" autoComplete=\"off\">\n                <fieldset>\n                    <label>\n                        Collection\n                    </label>\n                    <input type=\"text\" value={collection.name} id=\"collectionName\" disabled />\n                </fieldset>\n                <fieldset>\n                    <label>\n                        Price (Eth)\n                    </label>\n                    <input type=\"number\" min=\"1\" max=\"100\" id=\"assetPrice\" onChange={handlePrice} />\n                    {priceRequired()}\n                </fieldset>\n                <fieldset>\n                    <label>\n                        Illustration (required)\n                    </label>\n                    <input type=\"file\" id=\"assetImage\" onChange={handleImage} />\n                    <div onClick={selectImage}>\n                        {selectedImage()}\n                    </div>\n                    {imageRequired()}\n                </fieldset>\n                <fieldset>\n                    <button onClick={(e) => { run(e) }} disabled={submitting}>\n                        create NFT\n                    </button>\n                </fieldset>\n            </form>\n        </main>\n    );\n}\n\nexport default NewAsset;","import React from \"react\";\n\nconst Loading = () => {\n    return (\n        <main className=\"loading\">\n            <h1>Loading</h1>\n        </main>\n    );\n}\n\nexport default Loading;","const useFetchCollections = (factory) => {\n    return async (customFilter = {}) => {\n        const res = await factory.getPastEvents('NftCollectionCreated', {\n            filter: customFilter,\n            fromBlock: 0,\n            toBlock: 'latest'\n        });\n        let collections = [];\n        for (const item of res) {\n            let collection = {\n                address: item.returnValues._collectionAddress,\n                name: item.returnValues._collectionName,\n                timestamp: item.returnValues._timestamp,\n                creator: item.returnValues._creator,\n                tokenURI: item.returnValues._tokenURI,\n            }\n            collections.push(collection);\n        }\n        return collections;\n    }\n}\n\nexport default useFetchCollections;","const useFetchAssetsByCollection = () => {\n    return async (contract) => {\n        const res = await contract.getPastEvents('NewTokenMinted', {\n            fromBlock: 0,\n            toBlock: 'latest'\n        });\n        console.log(res);\n        let assets = [];\n        for (const item of res) {\n            let asset = {\n                address: item.returnValues._collectionAddress,\n                tokenId: item.returnValues._tokenId,\n                tokenURI: await contract.methods.tokenURI(item.returnValues._tokenId).call()\n            }\n            console.log(asset);\n            assets.push(asset);\n        }\n        return assets;\n    }\n}\n\nexport default useFetchAssetsByCollection;","import contractNftCollection from \"../contracts/NftCollection.json\";\nimport useFetchAssetsByCollection from \"./fetchassetsbycollection\";\nimport useFetchCollections from \"./fetchcollections\";\n\nconst useGetCollectionDetails = (web3, factory) => {\n    const fetchAssetsByCollection = useFetchAssetsByCollection();\n    const fetchCollections = useFetchCollections(factory);\n    return async (address) => {\n        try {\n            let nftCollection = new web3.eth.Contract(contractNftCollection.abi, address);\n            let name = await nftCollection.methods.name().call();\n            let filter = {\n                _collectionAddress: address\n            }\n            let coll = await fetchCollections(filter);\n            let assets = await fetchAssetsByCollection(nftCollection);\n           // let assetsNbr = await fetchAssetsByCollection(nftCollection);\n            let res = {\n                address: address,\n                creator: coll[0].creator,\n                timestamp: coll[0].timestamp,\n                name: name,\n                tokenURI: coll[0].tokenURI,\n                assets: assets,\n             //   assetsNbr: \n            }\n            return res;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n};\n\nexport default useGetCollectionDetails;"],"sourceRoot":""}